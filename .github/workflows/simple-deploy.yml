name: Simple Deploy (PowerShell Equivalent)

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose action'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - destroy
      s3_bucket_name:
        description: 'S3 bucket name'
        required: true
        type: string

jobs:
  deploy:
    if: github.event.inputs.action == 'deploy'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Step 1 - Zip Lambda function
        run: |
          echo "Zipping Lambda function..."
          cd lambda
          zip -r lambda_function.zip handler.py
          echo "✅ Lambda zipped"
          cd ..

      - name: Step 2 - Initialize Terraform
        run: |
          echo "Initializing Terraform..."
          terraform init -upgrade

      - name: Step 3 - Validate Terraform
        run: |
          echo "Validating Terraform..."
          terraform validate

      - name: Step 4 - Plan Terraform
        run: |
          echo "Planning Terraform deployment..."
          terraform plan -var="s3_bucket_name=${{ github.event.inputs.s3_bucket_name }}"

      - name: Step 5 - Apply Terraform
        run: |
          echo "Applying Terraform deployment..."
          terraform apply -auto-approve -var="s3_bucket_name=${{ github.event.inputs.s3_bucket_name }}"
          echo "✅ Deployment complete!"

  destroy:
    if: github.event.inputs.action == 'destroy'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Step 1 - Initialize Terraform
        run: |
          echo "Initializing Terraform..."
          terraform init -upgrade

      - name: Step 2 - Validate Terraform
        run: |
          echo "Validating Terraform..."
          terraform validate

      - name: Step 3 - Destroy Infrastructure
        run: |
          echo "Destroying all Terraform-managed resources..."
          terraform destroy -auto-approve -var="s3_bucket_name=${{ github.event.inputs.s3_bucket_name }}"
          echo "✅ All resources destroyed!"

      - name: Force cleanup orphaned resources
        run: |
          echo "Cleaning up any orphaned resources..."
          aws s3 rm s3://${{ github.event.inputs.s3_bucket_name }} --recursive || true
          aws s3 rb s3://${{ github.event.inputs.s3_bucket_name }} || true
          aws iam detach-role-policy --role-name etl-glue-job-exec-role --policy-arn arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole || true
          aws iam delete-role --role-name etl-glue-job-exec-role || true
          aws iam detach-role-policy --role-name etl-lambda-lambda-exec-role --policy-arn arn:aws:iam::aws:policy/CloudWatchLogsFullAccess || true
          aws iam detach-role-policy --role-name etl-lambda-lambda-exec-role --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess || true
          aws iam delete-role --role-name etl-lambda-lambda-exec-role || true
          echo "✅ Cleanup completed!"
